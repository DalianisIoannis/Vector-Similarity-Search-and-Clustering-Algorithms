#include "../headers/kMeans.h"

cluster::cluster()
{
    cout<<"I've just created cluster." <<endl;
}

cluster::~cluster()
{
    cout <<"I'm destroying cluster"<<endl;
}

KMeans::KMeans(const int num):numOfclusters(num)
{
    cout<<"I've just created KMeans." <<endl;

    this->clusterAr = new vector<cluster*> (this->numOfclusters);
}

KMeans::~KMeans()
{
    cout <<"I'm destroying KMeans"<<endl;

    delete this->clusterAr;
}

void KMeans::addCentroid(inputForm* newC) {
//     this->centroids[this->centroids.size()] = newC;
    if(this->clusterAr->size() < (unsigned int)this->numOfclusters) {
        this->clusterAr->resize(this->clusterAr->size() + 1);

    }
}

int KMeans::getClusNum() {
    return this->numOfclusters;
}

void KMeans::Clusterify(dataInput* data) {
    // for (unsigned int i = 0; i < 2; i++) {
    //     cout << "THIS IS IMAGE " << i << endl;
    //     for (unsigned int j = 20; j < 90; j++){
    //         cout << "BIT " << j << " " << data->getinputFormByNum(i)->image[j] << endl;
    //     }
    // }

    std::random_device rd;  //Will be used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
    std::uniform_int_distribution<> distrib(0, data->getiMageVectorSize()-1);
    // cout << "Size is " << data->getiMageVectorSize() << endl;
 
    // for (int n=0; n<10; ++n)
    //     //Use `distrib` to transform the random unsigned int generated by gen into an int in [1, 6]
    //     std::cout << distrib(gen) << ' ';
    // std::cout << '\n';

    // uniformly choose first centroid
    int t=1;    // num of centroids
    int dataSize = data->getiMageVectorSize();
    int un = distrib(gen);
    cout << "For index " << un << " got id " << data->getinputFormByNum(un)->Id << endl;

    
    while(t < this->getClusNum()) {
        for (unsigned int i = 0; i < dataSize; i++) {
    //     if(i != un) {
    //         vector<int> D(dataSize - t);

        }
        t++;
    }
}